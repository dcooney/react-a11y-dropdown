{"version":3,"sources":["lib/components/DropDown/DropDown.js","App.js","index.js"],"names":["DropDown","props","html","id","label","children","useState","expanded","setExpanded","loaded","useRef","containerRef","menuRef","triggerRef","clickOutside","event","current","contains","target","focusOutside","escClick","key","setFocus","element","setTimeout","focus","preventScroll","useEffect","keyboardControls","active","document","activeElement","elements","querySelectorAll","length","el","array","Array","prototype","slice","call","index","indexOf","getActiveIndex","which","next","preventDefault","prev","addEventListener","removeEventListener","ref","className","onClick","dangerouslySetInnerHTML","__html","App","href","htmlFor","type","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.63d277c5.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport './styles.css'\n\n/**\n * Accessibile Dropdown component.\n *\n * @param   {object}  props          The component props.\n * @param   {object}  props.children Container children.\n * @returns {Element}                The DropDown component.\n */\nexport default function DropDown(props) {\n   const {id, label, children} = props\n   const [expanded, setExpanded] = useState(false)\n   const loaded = useRef(false)\n   const containerRef = useRef()\n   const menuRef = useRef()\n   const triggerRef = useRef()\n   const focusable =\n      'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])'\n\n   useEffect(() => {\n      /**\n       * Handle keyboard controls.\n       *\n       * @param {Event} event The click event.\n       */\n      function keyboardControls(event) {\n         const active = document.activeElement\n         const elements = menuRef.current.querySelectorAll(focusable)\n\n         // Exit if elements are not focusable.\n         if (!containerRef.current.contains(active) || elements.length === 0) {\n            return\n         }\n\n         const {index, length} = getActiveIndex(active, elements)\n\n         if (event.which === 40) {\n            if (active === triggerRef.current) {\n               // Focused on trigger then expand the menu.\n               setFocus(elements[0])\n               setExpanded(true)\n            } else {\n               const next = index === length ? 0 : index + 1\n               elements[next] && setFocus(elements[next])\n            }\n            event.preventDefault()\n            return false\n         }\n\n         if (event.which === 38) {\n            if (active === triggerRef.current) {\n               // Focused on trigger then collapse the menu.\n               setExpanded(false)\n            } else {\n               const prev = index === 0 ? length : index - 1\n               elements[prev] && setFocus(elements[prev])\n            }\n            event.preventDefault()\n            return false\n         }\n      }\n\n      if (!loaded.current) {\n         document.addEventListener('click', clickOutside)\n         document.addEventListener('keyup', focusOutside)\n         document.addEventListener('keydown', keyboardControls)\n         document.addEventListener('keydown', escClick)\n         loaded.current = true\n      }\n\n      return () => {\n         document.removeEventListener('click', clickOutside)\n         document.removeEventListener('keyup', focusOutside)\n         document.removeEventListener('keydown', keyboardControls)\n         document.removeEventListener('keydown', escClick)\n      }\n   }, [])\n\n   /**\n    * Close menu when clicking outside.\n    *\n    * @param {Event} event The click event.\n    */\n   function clickOutside(event) {\n      if (\n         !menuRef.current.contains(event.target) &&\n         !triggerRef.current.contains(event.target)\n      ) {\n         setExpanded(false)\n      }\n   }\n\n   /**\n    * Checks for focus outside of component.\n    *\n    * @param {Event} event The click event.\n    */\n   function focusOutside(event) {\n      if (!containerRef.current.contains(event.target)) {\n         setExpanded(false)\n      }\n   }\n\n   /**\n    * Detect an escape key press and close.\n    *\n    * @param {Event} event The click event.\n    */\n   function escClick(event) {\n      if (event.key === 'Escape') {\n         setExpanded(false)\n      }\n   }\n\n   /**\n    * Get the current index position for the active element.\n    *\n    * @param   {HTMLElement} el       The current element to compare.\n    * @param   {NodeList}    elements The list of elements.\n    * @returns {Boolean}              The current index position in array.\n    */\n   function getActiveIndex(el, elements) {\n      const array = Array.prototype.slice.call(elements) // Convert NodeList to array.\n      return {\n         index: array.indexOf(el),\n         length: array.length - 1\n      }\n   }\n\n   /**\n    * Set focus on element.\n    *\n    * @param {HTMLElement} element The element to recieve focus.\n    */\n   function setFocus(element) {\n      if (!element) {\n         return\n      }\n      setTimeout(() => {\n         element.focus({preventScroll: true})\n      }, 25)\n   }\n\n   /**\n    * Create HTML from a string.\n    *\n    * @param   {string} html The string to set as HTML.\n    * @returns {string}      Returns a string to render as HTML.\n    */\n   function createMarkup(html) {\n      return {\n         __html: html\n      }\n   }\n\n   return (\n      <>\n         {!!label && (\n            <div\n               ref={containerRef}\n               className=\"react-a11y-dropdown\"\n               id={id ? id : null}\n            >\n               <button\n                  ref={triggerRef}\n                  className=\"react-a11y-dropdown--button\"\n                  aria-expanded={expanded ? 'true' : 'false'}\n                  onClick={() => setExpanded((expanded) => !expanded)}\n                  dangerouslySetInnerHTML={createMarkup(label)}\n               ></button>\n               <div\n                  className=\"react-a11y-dropdown--menu\"\n                  ref={menuRef}\n                  aria-hidden={expanded ? 'false' : 'true'}\n               >\n                  {children}\n               </div>\n            </div>\n         )}\n      </>\n   )\n}\n\nDropDown.propTypes = {\n   id: PropTypes.string,\n   label: PropTypes.string.isRequired,\n   children: PropTypes.object\n}\n","import DropDown from './lib/components/DropDown'\n\nexport default function App() {\n   return (\n      <div className=\"p-5\">\n         <h1 className=\"text-3xl font-bold mb-1\">React A11y DropDown</h1>\n         <h2 className=\"text-2xl font-thin opacity-75 pb-5 border-b mb-5\">\n            An accessible and unopinionated dropdown component for{' '}\n            <a href=\"https://www.reactjs.org\">React</a> for full keyboard\n            support.\n         </h2>\n         <p className=\"font-normal mb-5\">\n            Use the tab key in combination with your keyboard up/down arrows to\n            navugate through the drop menu's and content.\n         </p>\n         <div className=\"flex flex-nowrap gap-5\">\n            <DropDown id=\"my-dropdown\" label=\"Show Options\">\n               <ul>\n                  <li>\n                     <a\n                        href=\"#\"\n                        className=\"block w-full text-left p-1 hover:underline\"\n                     >\n                        Link One\n                     </a>\n                  </li>\n                  <li>\n                     <a\n                        href=\"#\"\n                        className=\"block w-full text-left p-1 hover:underline\"\n                     >\n                        Link Two\n                     </a>\n                  </li>\n                  <li>\n                     <a\n                        href=\"#\"\n                        className=\"block w-full text-left p-1 hover:underline\"\n                     >\n                        Link Three\n                     </a>\n                  </li>\n                  <li>\n                     <a\n                        href=\"#\"\n                        className=\"block w-full text-left p-1 hover:underline\"\n                     >\n                        Link Four\n                     </a>\n                  </li>\n                  <li>\n                     <a\n                        href=\"#\"\n                        className=\"block w-full text-left p-1 hover:underline\"\n                     >\n                        Link Five\n                     </a>\n                  </li>\n               </ul>\n            </DropDown>\n            <DropDown id=\"my-id-2\" label=\"Show Form Elements\">\n               <div>\n                  <ul className=\"mb-2\">\n                     <li>\n                        <button className=\"w-full text-left p-1 hover:underline\">\n                           Item One\n                        </button>\n                     </li>\n                     <li>\n                        <button className=\"w-full text-left p-1 hover:underline\">\n                           Item Two\n                        </button>\n                     </li>\n                     <li>\n                        <button className=\"w-full text-left p-1 hover:underline\">\n                           Item Three\n                        </button>\n                     </li>\n                  </ul>\n                  <div className=\"p-3 bg-gray-100\">\n                     <label\n                        htmlFor=\"input\"\n                        className=\"block uppercase font-bold text-xs m-0 mb-1\"\n                     >\n                        Form Input\n                     </label>\n                     <input id=\"input\" type=\"text\" className=\"border w-full\" />\n                  </div>\n               </div>\n            </DropDown>\n            <DropDown label={`No Focusable Elements <span>💪</span>`}>\n               <div className=\"p-2\">\n                  <h4 className=\"font-bold text-md mb-2\">Heading Text</h4>\n                  <p className=\"text-sm\">\n                     There are no interections in this dropdown. It's for\n                     informational purposes only.\n                  </p>\n               </div>\n            </DropDown>\n         </div>\n      </div>\n   )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n)\n"],"sourceRoot":""}